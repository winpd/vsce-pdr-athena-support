{"version":3,"file":"extension.js","mappings":"qHAAA,eAEA,2BACI,sBAAAA,CAAuBC,EAA+BC,EAA2BC,EAAiCC,GAC9G,MAAMC,EAAaJ,EAASK,OAAOJ,GAAUK,KAAKC,OAAO,EAAGN,EAASO,WACrE,IAAIC,EAAoB,GAUxB,OARIL,EAAWM,SAAS,OACpBD,EAAW,CAAC,WAAY,YAAa,SAAU,UACxCL,EAAWM,SAAS,SAC3BD,EAAW,CAAC,WAAY,YAAa,SAAU,WAG3BA,EAASE,KAAIC,GAAO,IAAIC,EAAOC,eAAeF,EAAKC,EAAOE,mBAAmBC,WAGzG,E,wFCdJ,MAAMC,EAAyB,CAC7B,aACA,YACA,UAGF,2BAAiCC,GAC/B,IAAK,MAAMC,KAAUF,EACnB,GAAIC,EAAUE,WAAWD,GACvB,OAAO,EAGX,OAAO,CACT,C,UCfAE,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCpBA,eACA,SACA,SAEA,SAASQ,EAAeC,IAClB,IAAAC,iBAAgBD,EAAI1B,OAAO,GAAGC,OAChCO,EAAOoB,UAAUC,wBAAwBH,EAAK,UAElD,CAEA,oBAA0B5B,GACxB,MAAMgC,EAAW,IAAI,EAAAC,mBAGrB,IAAK,MAAML,KAAOlB,EAAOwB,UAAUC,cACjCR,EAAcC,GAIhB5B,EAAQoC,cAAcC,KAAK3B,EAAOwB,UAAUI,sBAAsBX,IAClE3B,EAAQoC,cAAcC,KAAK3B,EAAOwB,UAAUK,sBAAsBZ,IAElE3B,EAAQoC,cAAcC,KAAK3B,EAAOoB,UAAUU,+BAA+B,CAAEC,SAAU,UAAWC,OAAQ,QAAUV,EAVzF,OAW7B,EAEA,wBAEA,C","sources":["webpack://pdr-athena-support/./src/completionProvider.ts","webpack://pdr-athena-support/./src/rathena.ts","webpack://pdr-athena-support/external commonjs \"vscode\"","webpack://pdr-athena-support/webpack/bootstrap","webpack://pdr-athena-support/./src/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\n\nexport class CompletionProvider implements vscode.CompletionItemProvider {\n    provideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext): vscode.ProviderResult<vscode.CompletionItem[] | vscode.CompletionList> {\n        const linePrefix = document.lineAt(position).text.substr(0, position.character);\n        let commands:string[] = [];\n\n        if (linePrefix.endsWith('set')) {\n            commands = ['set_name', 'set_money', 'set_hp', 'set_mp'];\n        } else if (linePrefix.endsWith('get')) {\n            commands = ['get_name', 'get_money', 'get_hp', 'get_mp'];\n        }\n\n        const completionItems = commands.map(cmd => new vscode.CompletionItem(cmd, vscode.CompletionItemKind.Function));\n\n        return completionItems;\n    }\n}","'use strict';\n\nconst raHeaderList: string[] = [\n  '//!rathena',\n  '//!athena',\n  '//!pdr',\n];\n\nexport function isRathenaHeader (firstLine: string): boolean {\n  for (const header of raHeaderList) {\n    if (firstLine.startsWith(header)) {\n      return true;\n    }\n  }\n  return false;\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","'use strict';\n\nimport * as vscode from 'vscode';\nimport { isRathenaHeader } from './rathena';\nimport { CompletionProvider } from './completionProvider';\n\nfunction associateFile (doc: vscode.TextDocument): void {\n  if (isRathenaHeader(doc.lineAt(0).text)) {\n    vscode.languages.setTextDocumentLanguage(doc, 'rathena');\n  }\n}\n\nexport function activate (context: vscode.ExtensionContext): void {\n  const provider = new CompletionProvider();\n  const triggerCharacters = ['set'];\n\n  for (const doc of vscode.workspace.textDocuments) {\n    associateFile(doc);\n  }\n\n  // Also associate file on open and save\n  context.subscriptions.push(vscode.workspace.onDidOpenTextDocument(associateFile));\n  context.subscriptions.push(vscode.workspace.onDidSaveTextDocument(associateFile));\n\n  context.subscriptions.push(vscode.languages.registerCompletionItemProvider({ language: 'rathena', scheme: 'file' }, provider, ...triggerCharacters));\n}\n\nexport function deactivate (): void {\n\t//\n}\n"],"names":["provideCompletionItems","document","position","token","context","linePrefix","lineAt","text","substr","character","commands","endsWith","map","cmd","vscode","CompletionItem","CompletionItemKind","Function","raHeaderList","firstLine","header","startsWith","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","associateFile","doc","isRathenaHeader","languages","setTextDocumentLanguage","provider","CompletionProvider","workspace","textDocuments","subscriptions","push","onDidOpenTextDocument","onDidSaveTextDocument","registerCompletionItemProvider","language","scheme"],"sourceRoot":""}